{
  "_from": "react-pdf@3.X",
  "_id": "react-pdf@3.0.4",
  "_inBundle": false,
  "_integrity": "sha1-qbSF6JQ8F2FzIXsQfEfVeJg8Fro=",
  "_location": "/react-pdf",
  "_phantomChildren": {
    "fbjs": "0.8.16",
    "loose-envify": "1.3.1",
    "object-assign": "4.1.1"
  },
  "_requested": {
    "escapedName": "react-pdf",
    "fetchSpec": "3.X",
    "name": "react-pdf",
    "raw": "react-pdf@3.X",
    "rawSpec": "3.X",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-pdf/-/react-pdf-3.0.4.tgz",
  "_shasum": "a9b485e8943c176173217b107c47d578983c16ba",
  "_spec": "react-pdf@3.X",
  "_where": "/var/www/html/app",
  "author": {
    "email": "kontakt@wojtekmaj.pl",
    "name": "Wojciech Maj"
  },
  "bugs": {
    "url": "https://github.com/wojtekmaj/react-pdf/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Anenth",
      "email": "anenthvishnu@gmail.com"
    },
    {
      "name": "Artur Termenji",
      "email": "atermenji@gmail.com"
    },
    {
      "name": "Bart Van Houtte",
      "email": "bart.van.houtte@ading.be"
    },
    {
      "name": "Felipe Lacerda",
      "email": "fegolac@gmail.com"
    },
    {
      "name": "Julia Kieserman",
      "email": "kieserman.julia@gmail.com"
    },
    {
      "name": "Niklas Närhinen",
      "email": "niklas@narhinen.net"
    },
    {
      "name": "Thomas McCarthy",
      "email": "tom@tomm.cc"
    }
  ],
  "dependencies": {
    "babel-runtime": "^6.26.0",
    "lodash.once": "^4.1.1",
    "merge-class-names": "^1.1.1",
    "pdfjs-dist": "2.0.305",
    "prop-types": "^15.6.1"
  },
  "deprecated": false,
  "description": "Display PDFs in your React app as easily as if they were images.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.2.2",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-16": "^1.1.1",
    "eslint": "^4.19.0",
    "eslint-config-airbnb": "^16.1.0",
    "eslint-plugin-class-property": "^1.1.0",
    "eslint-plugin-import": "^2.9.0",
    "eslint-plugin-jsx-a11y": "^6.0.3",
    "eslint-plugin-react": "^7.7.0",
    "jest": "^22.4.2",
    "jest-cli": "^22.4.2",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "webpack": "^3.11.0"
  },
  "es6": "src/entry.js",
  "files": [
    "LICENSE",
    "README.md",
    "dist/",
    "src/"
  ],
  "homepage": "https://github.com/wojtekmaj/react-pdf#readme",
  "jest": {
    "collectCoverageFrom": [
      "!**/src/entry.js",
      "!**/src/entry.noworker.js",
      "!**/src/entry.parcel.js",
      "!**/src/entry.webpack.js",
      "!**/src/pdf.worker.entry.js",
      "**/src/**.{js,jsx}"
    ],
    "moduleNameMapper": {
      "\\.(css|less)$": "<rootDir>/__mocks__/styleMock.js"
    },
    "setupFiles": [
      "<rootDir>/jest.setup.js"
    ],
    "testPathIgnorePatterns": [
      "utils.js"
    ]
  },
  "keywords": [
    "pdf",
    "pdf-viewer",
    "react"
  ],
  "license": "MIT",
  "main": "dist/entry.js",
  "name": "react-pdf",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15.5",
    "react-dom": ">=15.5"
  },
  "readme": "![downloads](https://img.shields.io/npm/dt/react-pdf.svg) ![build](https://img.shields.io/travis/wojtekmaj/react-pdf/master.svg) ![dependencies](https://img.shields.io/david/wojtekmaj/react-pdf.svg\n) ![dev dependencies](https://img.shields.io/david/dev/wojtekmaj/react-pdf.svg\n) [![tested with jest](https://img.shields.io/badge/tested_with-jest-99424f.svg)](https://github.com/facebook/jest)\n\n# React-PDF\n\nDisplay PDFs in your React app as easily as if they were images.\n\n## tl;dr\n* Install by executing `npm install react-pdf` or `yarn add react-pdf`.\n* Import by adding `import { Document } from 'react-pdf'`.\n* Use by adding `<Document file=\"...\" />`. `file` can be a URL, base64 content, Uint8Array, and more.\n* Put `<Page />` components inside `<Document />` to render pages.\n\n## Demo\n\nMinimal demo page is included in sample directory.\n\n[Online demo](http://projects.wojtekmaj.pl/react-pdf/) is also available!\n\n## Getting started\n\n### Compatibility\n\nYour project needs to use React 15.5 or later. If you use older version of React, please refer to the table below to find suitable React-PDF version.\n\n|React version|Newest supported React-PDF|\n|----|----|\n|>15.5|latest|\n|>15.0|1.6.1|\n|>0.14|0.0.10|\n|>0.13|0.0.10|\n|>0.11|0.0.4|\n\n### Installation\n\nAdd React-PDF to your project by executing `npm install react-pdf` or `yarn add react-pdf`.\n\n### Usage\n\nHere's an example of basic usage:\n\n```js\nimport React, { Component } from 'react';\nimport { Document, Page } from 'react-pdf';\n\nclass MyApp extends Component {\n  state = {\n    numPages: null,\n    pageNumber: 1,\n  }\n\n  onDocumentLoad = ({ numPages }) => {\n    this.setState({ numPages });\n  }\n\n  render() {\n    const { pageNumber, numPages } = this.state;\n\n    return (\n      <div>\n        <Document\n          file=\"somefile.pdf\"\n          onLoadSuccess={this.onDocumentLoad}\n        >\n          <Page pageNumber={pageNumber} />\n        </Document>\n        <p>Page {pageNumber} of {numPages}</p>\n      </div>\n    );\n  }\n}\n```\n\nCheck the sample directory of this repository for a full working example.\n\n### Enable PDF.js worker\n\nIt is crucial for performance to use PDF.js worker whenever possible. This ensures that your PDF file will be rendered in a separate thread without affecting page performance. To make things a little easier, we've prepared several entry points you can use.\n\n#### Webpack\n\nIf you use Webpack, you're in luck. Instead of directly importing/requiring `'react-pdf'`, import it like so:\n\n```js\nimport { Document } from 'react-pdf/dist/entry.webpack';\n```\n\n…and you're all set!\n\n#### Parcel\n\nIf you use Parcel, it's not a problem either. Instead of directly importing/requiring `'react-pdf'`, import it like so:\n\n```js\nimport { Document } from 'react-pdf/dist/entry.parcel';\n```\n\n…and you're done!\n\n#### Browserify and others\n\nIf you use Browserify or other bundling tools, you will have to make sure on your own that `pdf.worker.js` file from `pdfjs-dist/build` is copied to your project's output folder.\n\n#### I give up\n\nIf you absolutely have to, you can import React PDF with worker disabled. You can do so by importing React-PDF like so:\n\n```js\nimport { Document } from 'react-pdf/dist/entry.noworker';\n```\n\n### Support for annotations\n\nIf you want to use annotations (e.g. links) in PDFs rendered by React-PDF, then you would need to include stylesheet necessary for annotations to be correctly displayed like so:\n\n```js\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\n```\n\n### Support for non-latin characters\n\nIf you want to ensure that PDFs with non-latin characters will render perfectly, or you have encountered the following warning:\n\n```\nWarning: CMap baseUrl must be specified, see \"PDFJS.cMapUrl\" (and also \"PDFJS.cMapPacked\").\n```\n\nthen you would also need to include cMaps in your build and tell React-PDF where they are.\n\n#### Copying cMaps\n\nFirst, you need to copy cMaps from `pdfjs-dist` (React-PDF's dependency - it should be in your `node_modules` if you have React-PDF installed). cMaps are located in `pdfjs-dist/cmaps`.\n\n##### Webpack\n\nAdd `copy-webpack-plugin` to your project if you haven't already:\n\n```\nnpm install copy-webpack-plugin --save-dev\n```\n\nNow, in your Webpack config, import the plugin:\n\n```js\nimport CopyWebpackPlugin from 'copy-webpack-plugin';\n```\n\nand in plugins section of your config, add the following:\n\n```js\nnew CopyWebpackPlugin([\n  {\n    from: 'node_modules/pdfjs-dist/cmaps/',\n    to: 'cmaps/'\n  },\n]),\n```\n\n##### Parcel, Browserify and others\n\nIf you use Parcel, Browserify or other bundling tools, you will have to make sure on your own that cMaps are copied to your project's output folder.\n\n#### Setting up React-PDF\n\nNow that you have cMaps in your build, import `setOptions` like so:\n\n```js\nimport { setOptions } from 'react-pdf';\n```\n\n**Note:** If you're using a different entry point, for example `react-pdf/build/entry.webpack'`, you can should use the same entry point to import `setOptions`. You can also add `setOptions` to the same `import` you're using to import `Document`, `Page`, and/or other components.\n\n```js\nsetOptions({\n  cMapUrl: 'cmaps/',\n  cMapPacked: true,\n});\n```\n\n## User guide\n\n### Document\n\nLoads a document passed using `file` prop.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `react-pdf__Document`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|error|Defines what the component should display in case of an error. Defaults to \"Failed to load PDF file.\".|<ul><li>String:<br />`\"An error occurred!\"`</li><li>React element:<br />`<div>An error occurred!</div>`</li><li>Function:<br />`this.renderError()`</li></ul>|\n|file|Defines what PDF should be displayed.<br />Its value can be an URL, a file (imported using `import ... from ...` or from file input form element), or an object with parameters (`url` - URL; `data` - data, preferably Uint8Array; `range` - PDFDataRangeTransport; `httpHeaders` - custom request headers, e.g. for authorization), `withCredentials` - a boolean to indicate whether or not to include cookies in the request (defaults to `false`).|<ul><li>URL:<br />`\"http://example.com/sample.pdf\"`</li><li>File:<br />`import sample from '../static/sample.pdf'` and then<br />`sample`</li><li>Parameter object:<br />`{ url: 'http://example.com/sample.pdf', httpHeaders: { 'X-CustomHeader': '40359820958024350238508234' }, withCredentials: true }`</ul>|\n|inputRef|A function that behaves like ref, but it's passed to main `<div>` rendered by `<Document>` component.|`(ref) => { this.myDocument = ref; }`|\n|loading|Defines what the component should display while loading. Defaults to \"Loading PDF…\".|<ul><li>String:<br />`\"Please wait!\"`</li><li>React element:<br />`<div>Please wait!</div>`</li><li>Function:<br />`this.renderLoader()`</li></ul>|\n|noData|Defines what the component should display in case of no data. Defaults to \"No PDF file specified.\".|<ul><li>String:<br />`\"Please select a file.\"`</li><li>React element:<br />`<div>Please select a file.</div>`</li><li>Function:<br />`this.renderNoData()`</li></ul>|\n|onItemClick|Function called when an item has been clicked. Usually, you would like to use this callback to move the user wherever they requested to.|`({ pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')`|\n|onLoadError|Function called in case of an error while loading a document.|`(error) => alert('Error while loading document! ' + error.message)`|\n|onLoadSuccess|Function called when the document is successfully loaded.|`(pdf) => alert('Loaded a file with ' + pdf.numPages + ' pages!')`|\n|onSourceError|Function called in case of an error while retrieving document source from `file` prop.|`(error) => alert('Error while retreiving document source! ' + error.message)`|\n|onSourceSuccess|Function called when document source is successfully retreived from `file` prop.|`() => alert('Document source retreived!')`|\n|rotate|Defines the rotation of the document in degrees. If provided, will change rotation globally, even for the pages which were given `rotate` prop of their own. 90 = rotated to the right, 180 = upside down, 270 = rotated to the left.|`90`|\n\n### Page\n\nDisplays a page. Must be placed inside `<Document />` or have `pdf` prop passed, which can be obtained from `<Document />`'s `onLoadSuccess` callback function.\n\n**Note:** `<Page/>` must be a direct child of `<Document />` component. `<Document />` passes necessary props only to its direct children. If you wish to put a component in between of `<Document />` and `<Page/>`, you must ensure to pass all the props to `<Page/>` component by yourself.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `react-pdf__Page`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|customTextRenderer|A function that customizes how a text layer is rendered. Passes itext item and index for item.|`({ str, itemIndex }) => { return (<mark>{str}</mark>) }`|\n|error|Defines what the component should display in case of an error. Defaults to \"Failed to load the page.\".|<ul><li>String:<br />`\"An error occurred!\"`</li><li>React element:<br />`<div>An error occurred!</div>`</li><li>Function:<br />`this.renderError()`</li></ul>|\n|inputRef|A function that behaves like ref, but it's passed to main `<div>` rendered by `<Page>` component.|`(ref) => { this.myPage = ref; }`|\n|loading|Defines what the component should display while loading. Defaults to \"Loading page…\".|<ul><li>String:<br />`\"Please wait!\"`</li><li>React element:<br />`<div>Please wait!</div>`</li><li>Function:<br />`this.renderLoader()`</li></ul>|\n|noData|Defines what the component should display in case of no data. Defaults to \"No page specified.\".|<ul><li>String:<br />`\"Please select a page.\"`</li><li>React element:<br />`<div>Please select a page.</div>`</li><li>Function:<br />`this.renderNoData()`</li></ul>|\n|onLoadError|Function called in case of an error while loading the page.|`(error) => alert('Error while loading page! ' + error.message)`|\n|onLoadSuccess|Function called when the page is successfully loaded.|`(page) => alert('Now displaying a page number ' + page.pageNumber + '!')`|\n|onRenderError|Function called in case of an error while rendering the page.|`(error) => alert('Error while loading page! ' + error.message)`|\n|onRenderSuccess|Function called when the page is successfully rendered on the screen.|`() => alert('Rendered the page!')`|\n|onGetAnnotationsSuccess|Function called when annotations are successfully loaded.|`(annotations) => alert('Now displaying ' + annotations.length + ' annotations!')`|\n|onGetAnnotationsError|Function called in case of an error while loading annotations.|`(error) => alert('Error while loading annotations! ' + error.message)`|\n|onGetTextSuccess|Function called when text layer items are successfully loaded.|`(items) => alert('Now displaying ' + items.length + ' text layer items!')`|\n|onGetTextError|Function called in case of an error while loading text layer items.|`(error) => alert('Error while loading text layer items! ' + error.message)`|\n|pageIndex|Defines which page from PDF file should be displayed. Defaults to 0.|`0`|\n|pageNumber|Defines which page from PDF file should be displayed. If provided, `pageIndex` prop will be ignored. Defaults to 1.|`1`|\n|renderAnnotations|Defined whether annotations (e.g. links) should be rendered. Defaults to true.|`false`|\n|renderTextLayer|Defines whether a text layer should be rendered. Defaults to true.|`false`|\n|rotate|Defines the rotation of the page in degrees. 90 = rotated to the right, 180 = upside down, 270 = rotated to the left. Defaults to page's default setting, usually 0.|`90`|\n|scale|Defines the scale in which PDF file should be rendered. Defaults to 1.0.|`0.5`|\n|width|Defines the width of the page. If not defined, canvas will be rendered at the width defined in PDF. If you define `width` and `scale` at the same time, the width will be multiplied by a given factor.|`300`|\n\n### Outline\n\nDisplays an outline (table of contents). Must be placed inside `<Document />` or have `pdf` prop passed, which can be obtained from `<Document />`'s `onLoadSuccess` callback function.\n\n#### Props\n\n|Prop name|Description|Example values|\n|----|----|----|\n|className|Defines custom class name(s), that will be added to rendered element along with the default `react-pdf__Outline`.|<ul><li>String:<br />`\"custom-class-name-1 custom-class-name-2\"`</li><li>Array of strings:<br />`[\"custom-class-name-1\", \"custom-class-name-2\"]`</li></ul>|\n|onItemClick|Function called when an item has been clicked. Usually, you would like to use this callback to move the user wherever they requested to.|`({ pageNumber }) => alert('Clicked an item from page ' + pageNumber + '!')`|\n|onLoadError|Function called in case of an error while retreiving the outline.|`(error) => alert('Error while retreiving the outline! ' + error.message)`|\n|onLoadSuccess|Function called when the outline is successfully retreived.|`() => alert('The outline has been successfully retreived.')`|\n|onParseError|Function called in case of an error while parsing the outline.|`(error) => alert('Error while parsing the outline! ' + error.message)`|\n|onParseSuccess|Function called when the outline is successfully parsed.|`({ outline }) => alert('There are ' + outline.length + ' top level items in the table of contents.')`|\n\n### setOptions\n\nAllows to set custom options of PDF.js renderer. Currently supported properties are:\n\n  - cMapUrl\n  - cMapPacked\n  - disableWorker\n  - workerSrc\n\nExample usage:\n\n```js\nsetOptions({\n  workerSrc: 'my-path-to-worker.js'\n});\n```\n\n## License\n\nThe MIT License.\n\n## Author\n\n<table>\n  <tr>\n    <td>\n      <img src=\"https://github.com/wojtekmaj.png?s=100\" width=\"100\">\n    </td>\n    <td>\n      Wojciech Maj<br />\n      <a href=\"mailto:kontakt@wojtekmaj.pl\">kontakt@wojtekmaj.pl</a><br />\n      <a href=\"http://wojtekmaj.pl\">http://wojtekmaj.pl</a>\n    </td>\n  </tr>\n</table>\n\n## Thank you\n\nThis project wouldn't be possible without awesome work of Niklas Närhinen <niklas@narhinen.net> who created its initial version and without Mozilla, author of [pdf.js](http://mozilla.github.io/pdf.js). Thank you!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wojtekmaj/react-pdf.git"
  },
  "scripts": {
    "build": "npm run build-js && npm run copy-styles",
    "build-js": "babel src -d dist --ignore **/__tests__",
    "copy-styles": "node ./copy-styles.js",
    "prepublishOnly": "npm run build",
    "test": "npm run test-eslint && npm run test-jest",
    "test-eslint": "eslint ./src",
    "test-jest": "jest",
    "test-jest-coverage": "jest --coverage"
  },
  "version": "3.0.4"
}
